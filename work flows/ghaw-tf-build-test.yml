name: "Review and deploy Test environment"
run-name: ${{ github.actor}} is running a Terraform review and deploy to Test üöÄ
on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test
permissions:
      # id-token write required for OIDC, contents read required for actions/checkout, pull-requests write required to comment on PR
      id-token: write
      contents: read
      pull-requests: write
env:
   TF_LOG: INFO
   AWS_REGION: ${{ vars.TF_VAR_REGION }}
   AWS_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
   AWS_BUCKET_KEY_NAME: ${{ secrets.TF_STATE_BUCKET_KEY }}

jobs:
  release_to_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./build
    environment: 
      name: test
    env:
      TF_VAR_Region: ${{ vars.TF_VAR_REGION }}
      TF_VAR_AZ01: ${{ vars.TF_VAR_AZ01 }}
      TF_VAR_AZ02: ${{ vars.TF_VAR_AZ02 }}
      TF_VAR_PublicIP: ${{ vars.TF_VAR_PUBLICIP }}
      TF_VAR_Prefix: ${{ vars.TF_VAR_PREFIX }}
      TF_VAR_SolTag: ${{ vars.TF_VAR_SOLTAG }}
      TF_VAR_GitHubRepo: ${{ vars.TF_VAR_GITHUBREPO }}
      TF_VAR_EnvCode: ${{ vars.TF_VAR_ENVCODE }}
      TF_VAR_EnvTag: ${{ vars.TF_VAR_ENVTAG }}
      TF_VAR_VPCCIDR: ${{ vars.TF_VAR_VPCCIDR }}
      TF_VAR_FQDN: ${{ vars.TF_VAR_FQDN }}
      TF_VAR_ECRRepo: ${{ vars.TF_VAR_ECRREPO }}
      TF_VAR_ImageTag: ${{ vars.TF_VAR_IMAGETAG }}
      TF_ROOT: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.TF_VAR_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-Actions-OIDC-TERRAFORM

      - name: Infracost Setup
        # Refer to https://github.com/infracost/actions?tab=readme-ov-file#quick-start
        if: github.event_name == 'pull_request'
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Infracost checkout base branch
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Infracost generate cost estimate baseline
        if: github.event_name == 'pull_request'
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json
      - name: Infracost checkout PR branch
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.head.ref }}'

      - name: Infracost generate Infracost diff
        if: github.event_name == 'pull_request'
        run: |
          infracost diff --path=${TF_ROOT} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json
                          
      - name: Infracost post comment
        if: github.event_name == 'pull_request'
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                      --repo=$GITHUB_REPOSITORY \
                                      --github-token=${{github.token}} \
                                      --pull-request=${{github.event.pull_request.number}} \
                                      --behavior=update
        continue-on-error: true

      - name: Checkov Scan
        if: github.event_name == 'pull_request'
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          soft_fail: true
          framework: terraform 
        continue-on-error: true

      - name: KICS Scan
        if: github.event_name == 'pull_request'
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore_on_exit: results
          output_path: myResults/
          enable_comments: true
  
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -no-color
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" -backend-config="key=${{ secrets.TF_STATE_BUCKET_KEY }}" -backend-config="region=${{ vars.TF_VAR_REGION }}" -backend-config="encrypt=true" -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}" -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform plan PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/test' && github.event_name == 'push'
        id: base
        run: terraform apply -auto-approve -input=false

      - name: Check ECS image exists
        if: github.ref == 'refs/heads/test' && github.event_name == 'push'
        id: ecsimage
        run: |
          if aws ecr describe-images --repository-name ${{ vars.TF_VAR_ECRREPO }} --image-ids imageTag=${{ vars.TF_VAR_IMAGETAG }} >/dev/null 2>&1
          then
            echo "image_exists=true" >> "$GITHUB_ENV"
          else
            echo "image_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Check for changes in ./appsrc
        if: github.ref == 'refs/heads/test' && github.event_name == 'push'
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            appsrc:
              - 'build/appsrc/**'

      - name: Replace placeholder in Program.cs
        if: steps.filter.outputs.appsrc == 'true' || env.image_exists == 'false' && github.ref == 'refs/heads/test' && github.event_name == 'push'
        run: sed -i 's/\$Environment/${{ vars.TF_VAR_ENVTAG }}/g' ./appsrc/Program.cs

      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
      - name: Setup .NET
        if: steps.filter.outputs.appsrc == 'true' || env.image_exists == 'false' && github.ref == 'refs/heads/test' && github.event_name == 'push'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build .NET
        if: steps.filter.outputs.appsrc == 'true' || env.image_exists == 'false' && github.ref == 'refs/heads/test' && github.event_name == 'push'
        run: dotnet publish ./appsrc -c Release --no-restore --property:PublishDir=${{ github.workspace }}/build/appbuild

      - name: Login to Amazon ECR
        if: steps.filter.outputs.appsrc == 'true' || env.image_exists == 'false' && github.ref == 'refs/heads/test' && github.event_name == 'push'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        if: steps.filter.outputs.appsrc == 'true' || env.image_exists == 'false' && github.ref == 'refs/heads/test' && github.event_name == 'push'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.TF_VAR_ECRREPO }}
          IMAGE_TAG: ${{ vars.TF_VAR_IMAGETAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./appsrc/Dockerfile ./appbuild
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Print Web App URL in Job Summary
        if: github.ref == 'refs/heads/test' && github.event_name == 'push'
        run: echo "${{ vars.TF_VAR_ENVTAG }} environment URL http://$(terraform output -raw mswebapp_alb_dns_name) :rocket:" >> $GITHUB_STEP_SUMMARY